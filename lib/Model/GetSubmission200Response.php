<?php
/**
 * GetSubmission200Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Docuseal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocuSeal API
 *
 * DocuSeal API specs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@docuseal.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Docuseal\Model;

use \ArrayAccess;
use \Docuseal\ObjectSerializer;

/**
 * GetSubmission200Response Class Doc Comment
 *
 * @category Class
 * @package  Docuseal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GetSubmission200Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getSubmission_200_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'slug' => 'string',
        'source' => 'string',
        'submitters_order' => 'string',
        'audit_log_url' => 'string',
        'combined_document_url' => 'string',
        'created_at' => 'string',
        'updated_at' => 'string',
        'archived_at' => 'string',
        'submitters' => '\Docuseal\Model\GetSubmission200ResponseSubmittersInner[]',
        'template' => '\Docuseal\Model\GetSubmissions200ResponseDataInnerTemplate',
        'created_by_user' => '\Docuseal\Model\GetSubmissions200ResponseDataInnerCreatedByUser',
        'submission_events' => '\Docuseal\Model\GetSubmission200ResponseSubmissionEventsInner[]',
        'documents' => '\Docuseal\Model\GetSubmission200ResponseSubmittersInnerDocumentsInner[]',
        'status' => 'string',
        'metadata' => 'object',
        'completed_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'slug' => null,
        'source' => null,
        'submitters_order' => null,
        'audit_log_url' => null,
        'combined_document_url' => null,
        'created_at' => null,
        'updated_at' => null,
        'archived_at' => null,
        'submitters' => null,
        'template' => null,
        'created_by_user' => null,
        'submission_events' => null,
        'documents' => null,
        'status' => null,
        'metadata' => null,
        'completed_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'slug' => false,
        'source' => false,
        'submitters_order' => false,
        'audit_log_url' => false,
        'combined_document_url' => false,
        'created_at' => false,
        'updated_at' => false,
        'archived_at' => false,
        'submitters' => false,
        'template' => false,
        'created_by_user' => false,
        'submission_events' => false,
        'documents' => false,
        'status' => false,
        'metadata' => false,
        'completed_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'slug' => 'slug',
        'source' => 'source',
        'submitters_order' => 'submitters_order',
        'audit_log_url' => 'audit_log_url',
        'combined_document_url' => 'combined_document_url',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'archived_at' => 'archived_at',
        'submitters' => 'submitters',
        'template' => 'template',
        'created_by_user' => 'created_by_user',
        'submission_events' => 'submission_events',
        'documents' => 'documents',
        'status' => 'status',
        'metadata' => 'metadata',
        'completed_at' => 'completed_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'slug' => 'setSlug',
        'source' => 'setSource',
        'submitters_order' => 'setSubmittersOrder',
        'audit_log_url' => 'setAuditLogUrl',
        'combined_document_url' => 'setCombinedDocumentUrl',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'archived_at' => 'setArchivedAt',
        'submitters' => 'setSubmitters',
        'template' => 'setTemplate',
        'created_by_user' => 'setCreatedByUser',
        'submission_events' => 'setSubmissionEvents',
        'documents' => 'setDocuments',
        'status' => 'setStatus',
        'metadata' => 'setMetadata',
        'completed_at' => 'setCompletedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'slug' => 'getSlug',
        'source' => 'getSource',
        'submitters_order' => 'getSubmittersOrder',
        'audit_log_url' => 'getAuditLogUrl',
        'combined_document_url' => 'getCombinedDocumentUrl',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'archived_at' => 'getArchivedAt',
        'submitters' => 'getSubmitters',
        'template' => 'getTemplate',
        'created_by_user' => 'getCreatedByUser',
        'submission_events' => 'getSubmissionEvents',
        'documents' => 'getDocuments',
        'status' => 'getStatus',
        'metadata' => 'getMetadata',
        'completed_at' => 'getCompletedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('submitters_order', $data ?? [], null);
        $this->setIfExists('audit_log_url', $data ?? [], null);
        $this->setIfExists('combined_document_url', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('archived_at', $data ?? [], null);
        $this->setIfExists('submitters', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('created_by_user', $data ?? [], null);
        $this->setIfExists('submission_events', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('completed_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Submission unique ID number.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string|null
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string|null $slug Unique slug of the submission.
     *
     * @return self
     */
    public function setSlug($slug)
    {
        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source The source of the submission.
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets submitters_order
     *
     * @return string|null
     */
    public function getSubmittersOrder()
    {
        return $this->container['submitters_order'];
    }

    /**
     * Sets submitters_order
     *
     * @param string|null $submitters_order The order of submitters.
     *
     * @return self
     */
    public function setSubmittersOrder($submitters_order)
    {
        if (is_null($submitters_order)) {
            throw new \InvalidArgumentException('non-nullable submitters_order cannot be null');
        }
        $this->container['submitters_order'] = $submitters_order;

        return $this;
    }

    /**
     * Gets audit_log_url
     *
     * @return string|null
     */
    public function getAuditLogUrl()
    {
        return $this->container['audit_log_url'];
    }

    /**
     * Sets audit_log_url
     *
     * @param string|null $audit_log_url Audit log file URL.
     *
     * @return self
     */
    public function setAuditLogUrl($audit_log_url)
    {
        if (is_null($audit_log_url)) {
            throw new \InvalidArgumentException('non-nullable audit_log_url cannot be null');
        }
        $this->container['audit_log_url'] = $audit_log_url;

        return $this;
    }

    /**
     * Gets combined_document_url
     *
     * @return string|null
     */
    public function getCombinedDocumentUrl()
    {
        return $this->container['combined_document_url'];
    }

    /**
     * Sets combined_document_url
     *
     * @param string|null $combined_document_url Combined PDF file URL with documents and Audit Log.
     *
     * @return self
     */
    public function setCombinedDocumentUrl($combined_document_url)
    {
        if (is_null($combined_document_url)) {
            throw new \InvalidArgumentException('non-nullable combined_document_url cannot be null');
        }
        $this->container['combined_document_url'] = $combined_document_url;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at The date and time when the submission was created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at The date and time when the submission was last updated.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets archived_at
     *
     * @return string|null
     */
    public function getArchivedAt()
    {
        return $this->container['archived_at'];
    }

    /**
     * Sets archived_at
     *
     * @param string|null $archived_at The date and time when the submission was archived.
     *
     * @return self
     */
    public function setArchivedAt($archived_at)
    {
        if (is_null($archived_at)) {
            throw new \InvalidArgumentException('non-nullable archived_at cannot be null');
        }
        $this->container['archived_at'] = $archived_at;

        return $this;
    }

    /**
     * Gets submitters
     *
     * @return \Docuseal\Model\GetSubmission200ResponseSubmittersInner[]|null
     */
    public function getSubmitters()
    {
        return $this->container['submitters'];
    }

    /**
     * Sets submitters
     *
     * @param \Docuseal\Model\GetSubmission200ResponseSubmittersInner[]|null $submitters The list of submitters.
     *
     * @return self
     */
    public function setSubmitters($submitters)
    {
        if (is_null($submitters)) {
            throw new \InvalidArgumentException('non-nullable submitters cannot be null');
        }
        $this->container['submitters'] = $submitters;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Docuseal\Model\GetSubmissions200ResponseDataInnerTemplate|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Docuseal\Model\GetSubmissions200ResponseDataInnerTemplate|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return \Docuseal\Model\GetSubmissions200ResponseDataInnerCreatedByUser|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param \Docuseal\Model\GetSubmissions200ResponseDataInnerCreatedByUser|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        if (is_null($created_by_user)) {
            throw new \InvalidArgumentException('non-nullable created_by_user cannot be null');
        }
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets submission_events
     *
     * @return \Docuseal\Model\GetSubmission200ResponseSubmissionEventsInner[]|null
     */
    public function getSubmissionEvents()
    {
        return $this->container['submission_events'];
    }

    /**
     * Sets submission_events
     *
     * @param \Docuseal\Model\GetSubmission200ResponseSubmissionEventsInner[]|null $submission_events submission_events
     *
     * @return self
     */
    public function setSubmissionEvents($submission_events)
    {
        if (is_null($submission_events)) {
            throw new \InvalidArgumentException('non-nullable submission_events cannot be null');
        }
        $this->container['submission_events'] = $submission_events;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Docuseal\Model\GetSubmission200ResponseSubmittersInnerDocumentsInner[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Docuseal\Model\GetSubmission200ResponseSubmittersInnerDocumentsInner[]|null $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The status of the submission.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata Object with custom metadata.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets completed_at
     *
     * @return string|null
     */
    public function getCompletedAt()
    {
        return $this->container['completed_at'];
    }

    /**
     * Sets completed_at
     *
     * @param string|null $completed_at The date and time when the submission was fully completed.
     *
     * @return self
     */
    public function setCompletedAt($completed_at)
    {
        if (is_null($completed_at)) {
            throw new \InvalidArgumentException('non-nullable completed_at cannot be null');
        }
        $this->container['completed_at'] = $completed_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


