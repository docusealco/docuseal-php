<?php
/**
 * CreateTemplateFromHtmlRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Docuseal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * DocuSeal API
 *
 * DocuSeal API specs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@docuseal.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.9.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Docuseal\Model;

use \ArrayAccess;
use \Docuseal\ObjectSerializer;

/**
 * CreateTemplateFromHtmlRequest Class Doc Comment
 *
 * @category Class
 * @package  Docuseal
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateTemplateFromHtmlRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createTemplateFromHtml_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'html' => 'string',
        'html_header' => 'string',
        'html_footer' => 'string',
        'name' => 'string',
        'size' => 'string',
        'external_id' => 'string',
        'folder_name' => 'string',
        'documents' => '\Docuseal\Model\CreateTemplateFromHtmlRequestDocumentsInner[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'html' => null,
        'html_header' => null,
        'html_footer' => null,
        'name' => null,
        'size' => null,
        'external_id' => null,
        'folder_name' => null,
        'documents' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'html' => false,
        'html_header' => false,
        'html_footer' => false,
        'name' => false,
        'size' => false,
        'external_id' => false,
        'folder_name' => false,
        'documents' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'html' => 'html',
        'html_header' => 'html_header',
        'html_footer' => 'html_footer',
        'name' => 'name',
        'size' => 'size',
        'external_id' => 'external_id',
        'folder_name' => 'folder_name',
        'documents' => 'documents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'html' => 'setHtml',
        'html_header' => 'setHtmlHeader',
        'html_footer' => 'setHtmlFooter',
        'name' => 'setName',
        'size' => 'setSize',
        'external_id' => 'setExternalId',
        'folder_name' => 'setFolderName',
        'documents' => 'setDocuments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'html' => 'getHtml',
        'html_header' => 'getHtmlHeader',
        'html_footer' => 'getHtmlFooter',
        'name' => 'getName',
        'size' => 'getSize',
        'external_id' => 'getExternalId',
        'folder_name' => 'getFolderName',
        'documents' => 'getDocuments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const SIZE_LETTER = 'Letter';
    public const SIZE_LEGAL = 'Legal';
    public const SIZE_TABLOID = 'Tabloid';
    public const SIZE_LEDGER = 'Ledger';
    public const SIZE_A0 = 'A0';
    public const SIZE_A1 = 'A1';
    public const SIZE_A2 = 'A2';
    public const SIZE_A3 = 'A3';
    public const SIZE_A4 = 'A4';
    public const SIZE_A5 = 'A5';
    public const SIZE_A6 = 'A6';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSizeAllowableValues()
    {
        return [
            self::SIZE_LETTER,
            self::SIZE_LEGAL,
            self::SIZE_TABLOID,
            self::SIZE_LEDGER,
            self::SIZE_A0,
            self::SIZE_A1,
            self::SIZE_A2,
            self::SIZE_A3,
            self::SIZE_A4,
            self::SIZE_A5,
            self::SIZE_A6,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('html', $data ?? [], null);
        $this->setIfExists('html_header', $data ?? [], null);
        $this->setIfExists('html_footer', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], 'Letter');
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('folder_name', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['html'] === null) {
            $invalidProperties[] = "'html' can't be null";
        }
        $allowedValues = $this->getSizeAllowableValues();
        if (!is_null($this->container['size']) && !in_array($this->container['size'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'size', must be one of '%s'",
                $this->container['size'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html HTML template with field tags.
     *
     * @return self
     */
    public function setHtml($html)
    {
        if (is_null($html)) {
            throw new \InvalidArgumentException('non-nullable html cannot be null');
        }
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets html_header
     *
     * @return string|null
     */
    public function getHtmlHeader()
    {
        return $this->container['html_header'];
    }

    /**
     * Sets html_header
     *
     * @param string|null $html_header HTML template of the header to be displayed on every page.
     *
     * @return self
     */
    public function setHtmlHeader($html_header)
    {
        if (is_null($html_header)) {
            throw new \InvalidArgumentException('non-nullable html_header cannot be null');
        }
        $this->container['html_header'] = $html_header;

        return $this;
    }

    /**
     * Gets html_footer
     *
     * @return string|null
     */
    public function getHtmlFooter()
    {
        return $this->container['html_footer'];
    }

    /**
     * Sets html_footer
     *
     * @param string|null $html_footer HTML template of the footer to be displayed on every page.
     *
     * @return self
     */
    public function setHtmlFooter($html_footer)
    {
        if (is_null($html_footer)) {
            throw new \InvalidArgumentException('non-nullable html_footer cannot be null');
        }
        $this->container['html_footer'] = $html_footer;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Template name. Random uuid will be assigned when not specified.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size Page size. Letter 8.5 x 11 will be assigned when not specified.
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $allowedValues = $this->getSizeAllowableValues();
        if (!in_array($size, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'size', must be one of '%s'",
                    $size,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Your application-specific unique string key to identify this template within your app. Existing template with specified `external_id` will be updated with a new HTML.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets folder_name
     *
     * @return string|null
     */
    public function getFolderName()
    {
        return $this->container['folder_name'];
    }

    /**
     * Sets folder_name
     *
     * @param string|null $folder_name The folder's name to which the template should be created.
     *
     * @return self
     */
    public function setFolderName($folder_name)
    {
        if (is_null($folder_name)) {
            throw new \InvalidArgumentException('non-nullable folder_name cannot be null');
        }
        $this->container['folder_name'] = $folder_name;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Docuseal\Model\CreateTemplateFromHtmlRequestDocumentsInner[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Docuseal\Model\CreateTemplateFromHtmlRequestDocumentsInner[]|null $documents The list of documents built from HTML. Can be used to create a template with multiple documents. Leave `documents` param empty when using a top-level `html` param for a template with a single document.
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


